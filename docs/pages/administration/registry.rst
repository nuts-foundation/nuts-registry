.. _nuts-registry-administration:

Nuts Registry Administration
############################

This administration guide will help you to achieve the following goals:

- :ref:`register-vendor-label` (representing your company).
- :ref:`register-organization-label` as vendor customer, which allows you to register endpoints.
- :ref:`register-endpoint-label` for the care organization.
- :ref:`update-endpoint-label` of the care organization.
- :ref:`verify-registry-data-label`.
- :ref:`refresh-vendor-certificate-label` of your registered vendor.
- :ref:`refresh-organization-certificate-label` of one of your vendor's organizations.

.. _update-nuts-registry-label:

Updating the central Nuts Registry
==================================

Currently, the data of the Nuts Registry is centrally hosted on Github. When you want other Nuts nodes to know about your
vendor, care organizations and endpoints you have to submit the data, produced by the administration commands, to get it
included in the registry. To do so, you have to create a pull request on Github for the
`nuts-foundation/nuts-registry-development <https://github.com/nuts-foundation/nuts-registry-development>`_ repository.
Should you be unable to do so, contact the Nuts Foundation for alternatives.

The event data generated by the commands (which you should submit to the central registry) can be copied from either the
CLI console or by copying the files from the registry storage on disk.

Copying files from disk
^^^^^^^^^^^^^^^^^^^^^^^

If you have access to the file system where your Nuts node stores its data, you can simply copy the event files from there.
They are typically stored in the *data/events* directory.

Copying from CLI console
^^^^^^^^^^^^^^^^^^^^^^^^

Alternatively you can copy the output of the CLI commands, since they output the event file name and payload, e.g.:

.. code-block:: shell

    Event: 20200224123533008-RegisterVendorEvent.json
    {"type":"RegisterVendorEvent","issuedAt":"2020-02-24T13:35:33.008076348+01:00","payload":{"identifier":"urn:oid:1.3.6.1.4.1.54851.4:00000001","name":"BecauseWeCare B.V."}}


.. note::

    In the (near) future we will move away from Github to a decentralized registry.

.. _register-vendor-label:

1. Registering a vendor
=======================

This command registers a vendor in the registry, giving it further access to the Nuts Registry. Afterwards, care organizations
can be registered as the organization's clients. When a vendor is registered, a CA certificate is issued. This certificate is used (by the vendor) to issue certificates,
e.g. care organization certificates.

To register a vendor, you need its name (as registered at the Chamber of Commerce) and its identifier should be
configured as the node's ``identity``, which is the company's URN-encoded Chamber of Commerce registration number.

The syntax of this command is as follows (parameter 'domain' defaults to 'healthcare'):

.. code-block:: shell

    ./nuts registry register-vendor <name> <domain>

To register vendor "BecauseWeCare B.V." identified by Chamber of Commerce registration number "00000001", run the following command ('domain' defaults to 'healthcare'):

.. code-block:: shell

    NUTS_MODE=cli ./nuts registry register-vendor "BecauseWeCare B.V."

If the command completes successfully, it should output the message: "Vendor registered."

.. note::

    The vendor CA certificate is currently self-signed. In the future, the vendor CA certificate will be issued by the Nuts Foundation.

.. _register-organization-label:

2. Registering a care organization
==================================

When a vendor is known in the Nuts Registry, it can register organization by claiming them (as client). Afterwards
the vendor can register endpoints for the organization which are served by the vendor's Nuts node. When an organization
is registered, the vendor CA issues an organization certificate. Its key is used for encrypting data exchanges and
signing registry operations (e.g. registering endpoints).

To register an organization you need the organization's name and its identifier, which is the organization's
URN-encoded AGB-code.

The syntax of this command is as follows:

.. code-block:: shell

    ./nuts registry vendor-claim <organization-identifier> <organization-name>

For example:

.. code-block:: shell

    NUTS_MODE=cli ./nuts registry vendor-claim urn:oid:2.16.840.1.113883.2.4.6.1:123456 "Kunstgebit Thuiszorg"

If the command completes successfully, it should output the message: "Vendor organization claim registered"

.. note::

    Registering an organization as vendor client is called *claiming* because in future instead of the vendor solely
    registering an organization being its client, the organization has to do the same (claim being a client of a software
    vendor). Only if both entities claim to have a relationship with each other, the organization is registered being a
    client of the vendor.

.. _register-endpoint-label:

3. Registering an endpoint
==========================

After registering an organization, the vendor can administer its endpoints. The endpoints are used by other Nuts nodes
when they want to exchange data with the Nuts node serving a particular organization.

The syntax of this command is as follows:

.. code-block:: shell

    ./nuts registry register-endpoint <organization-identifier> <type> <url>

In the following example we register a Corda consent endpoint for the previously registered organization:

.. code-block:: shell

    NUTS_MODE=cli ./nuts registry register-endpoint urn:oid:2.16.840.1.113883.2.4.6.1:123456 \
        urn:nuts:endpoint:consent \
        "tcp://1.2.3.4:4321" \
        -i "urn:ietf:rfc:1779:O=Kunstgebit Thuiszorg,C=NL,L=Franeker,CN=kunstgebitthuiszorg_nuts_cordapp_development"

Don't forget to replace the ID flag (``-i``) with the correct subject DN from the node's X.509 certificate (which is specific for this endpoint type).

.. note::

    Endpoint ID is application specific, some endpoint types (e.g. ``urn:nuts:endpoint:consent``) require a specific
    ID for others it doesn't matter and the randomly generated ID is fine. When registering an endpoint for a Bolt,
    please refer to the Bolt documentation for any specifics.


In addition the following flags can be supplied:

====  =================================================================================  ==========
Flag  Description                                                                        Example
====  =================================================================================  ==========
-i    Identifier for the endpoint. If not supplied a type 4 UUID is randomly generated.  `-i abc`
-p    Endpoint metadata in the form of string properties, specified as **key=value**     `-p foo=bar`
====  =================================================================================  ==========

.. _update-endpoint-label:

4. Updating an existing endpoint
================================

To update an endpoint, simply register it again using the ``register-endpoint`` command using the same ID. The update
completely replaces the previous registration, so specify all relevant fields and properties. Don't forget to specify
the ID (using the ``-i`` flag) if it was auto-generated during endpoint registration.

.. _verify-registry-data-label:

5. Verifying and fixing registry data
=====================================

In certain circumstances the registry data owned by your node might need maintenance. Examples are when certificates are
missing or close to expiry, records that need to be migrated to a newer version (format) or missing signatures. The Nuts
node performs verification on startup and will inform the you (through the logs) of any issues that need to be fixed.

To verify the data using the CLI use the ``verify`` command:

.. code-block:: shell

    NUTS_MODE=cli ./nuts registry verify

If your node's registry data needs fixing this command will inform you:

.. code-block:: text

    Verification complete, data must be fixed. Please rerun command with --fix or -f

To apply the fixes, rerun the command with the ``-f`` flag:

.. code-block:: shell

    NUTS_MODE=cli ./nuts registry verify -f

When data is fixed new events are emitted. It's **very important** that these events are submitted to the central
Nuts registry (please refer to :ref:`update-nuts-registry-label`).

.. note::

    It's recommended to verify (and fix if necessary) your node's data after each upgrade to ensure compatibility in
    the long term. The best way to spot problems is to inspect your node's logs when starting it after upgrading.

.. _refresh-vendor-certificate-label:

6. Refreshing vendor CA certificate
===================================

At some point the vendor CA certificate must be refreshed (issued again). Most often because the current certificate
is nearing the end of its validity. If the vendor doesn't have a certificate yet this command is used to issue it.
This command will **not** rotate (create a new) the key pair for the vendor but will create one if it doesn't exist.

The syntax of this command is as follows:

.. code-block:: shell

    ./nuts registry refresh-vendor-cert

.. _refresh-organization-certificate-label:

7. Refreshing organization certificate
======================================

This works exactly the same as :ref:`refresh-vendor-certificate-label` but works on an organization.
The syntax of this command is as follows:

.. code-block:: shell

    ./nuts registry refresh-organization-cert <organization-identifier>

In the following example we refresh the certificate for a previously registered organization:

.. code-block:: shell

    NUTS_MODE=cli ./nuts registry refresh-organization-cert urn:oid:2.16.840.1.113883.2.4.6.1:123456