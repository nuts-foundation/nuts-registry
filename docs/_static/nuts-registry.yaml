openapi: "3.0.0"
info:
  title: Nuts registry API spec
  description: API specification for RPC services available at the nuts-registry
  version: 0.1.0
  license:
    name: GPLv3
paths:
  /api/vendors:
    post:
      summary: "Adds a vendor to the registry"
      operationId: "registerVendor"
      tags:
        - vendors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vendor'
      responses:
        '200':
          description: "Vendor has been created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: "incorrect data"
  /api/vendor/{id}/claim:
    post:
      summary: "Claim an organization for a vendor (registers an organization under a vendor in the registry)."
      operationId: "vendorClaim"
      tags:
        - vendors
        - organisations
      parameters:
        - name: id
          in: path
          description: "URL encoded identifier"
          required: true
          example: "urn:oid:2.16.840.1.113883.2.4.6.1:00000007"
          schema:
            type: string
      description: |
        Keys can follow the following structures (EC or RSA):
        ```json
        "keys": [{
          "kty": "RSA",
          "n": "0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw",
          "e": "AQAB",
          "alg": "RS256",
          "kid": "2011-04-29",
        }]
        ```

        or

        ```json
        "keys": [{
          "kty": "EC",
          "crv": "P-256",
          "x": "MKBCTNIcKUSDii11ySs3526iDZ8AiTo7Tu6KPAqv7D4",
          "y": "4Etl6SRW2YiLUrN5vfvVHuhp7x8PxltmWWlbbM4IFyM",
          "kid": "1",
        }]
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '200':
          description: "Claim has been created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: "incorrect data"
  /api/organization/{id}:
    get:
      summary: "Get organization by id"
      operationId: organizationById
      tags:
        - organizations
      parameters:
        - name: id
          in: path
          description: "URL encoded identifier"
          required: true
          example: "urn:oid:2.16.840.1.113883.2.4.6.1:00000007"
          schema:
            type: string
      responses:
        '200':
          description: OK response with list of valid organizations, list may be empty
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          description: Unknown organization
          content:
            text/plain:
              schema:
                type: string
  /api/organization/{id}/endpoints:
    post:
      summary: "Adds an endpoint for this organisation to the registry"
      operationId: "registerEndpoint"
      tags:
        - endpoints
      parameters:
        - name: id
          in: path
          description: "URL encoded identifier"
          required: true
          example: "urn:oid:2.16.840.1.113883.2.4.6.1:00000007"
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Endpoint'
      responses:
        '200':
          description: "Endpoint has been created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: "incorrect data"
  /api/organizations:
    get:
      summary: "Search for organizations"
      operationId: searchOrganizations
      tags:
        - organizations
      parameters:
        - name: query
          in: query
          description: Search string
          required: true
          schema:
            type: string
        - name: exact
          in: query
          description: Only return exact matches, for reverse lookup
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK response with list of valid organizations, list may be empty
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
        '400':
          description: incorrect search query
          content:
            text/plain:
              example: No search query given
              schema:
                type: string
  /api/endpoints:
    get:
      summary: Find endpoints based on organisation identifiers and type of endpoint (optional)
      operationId: endpointsByOrganisationId
      tags:
        - endpoints
      parameters:
        - name: orgIds
          in: query
          description: A list of organisation identifiers to query for. identifiers are Nuts Identifiers with proper escaping
          required: true
          schema:
            type: array
            items:
              type: string
              description: URL encoded Identifiers
        - name: type
          in: query
          description: The type of endpoint requested, eg Nuts or FHIR
          required: false
          schema:
            type: string
        - name: strict
          in: query
          required: false
          schema:
            type: boolean
          description: only return successfull result if each given organisation has an endpoint of the requested type, otherwise 400
      responses:
        '200':
          description: OK response with list of valid endpoint-organization tuples, list may be empty
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Endpoint'
        '400':
          description: incorrect search query
          content:
            text/plain:
              examples:
                empty:
                  value: "No organisation identifiers given"
                strict:
                  value: "organization with id X does not have an endpoint of type Y"
              schema:
                type: string
components:
  schemas:
    Event:
      properties:
        type:
          type: string
          description: type of the event
          example: RegisterVendorEvent
        issuedAt:
          type: string
          format: date-time
          description: timestamp at which the event happened
        payload:
          oneOf:
            - $ref: "#/components/schemas/RegisterVendorEvent"
            - $ref: "#/components/schemas/VendorClaimEvent"
            - $ref: "#/components/schemas/RegisterEndpointEvent"
          description: payload of the event
    Vendor:
      required:
        - name
        - identifier
        - domain
      properties:
        name:
          type: string
          description: the well-known name for the vendor
          example: Medicare Software for People B.V.
        identifier:
          $ref: "#/components/schemas/Identifier"
        domain:
          $ref: "#/components/schemas/Domain"
    Organization:
      required:
        - name
        - identifier
      properties:
        name:
          type: string
          description: the well-known name for the organization
          example: Zorggroep Nuts
        identifier:
          $ref: "#/components/schemas/Identifier"
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/Endpoint"
        publicKey:
          type: string
          description: "PEM encoded public key (deprecated, use JWK)"
        keys:
          type: array
          items:
            $ref: "#/components/schemas/JWK"
    Endpoint:
      required:
        - endpointType
        - identifier
        - status
        - version
        - URL
      properties:
        endpointType:
          type: string
          description: URI of the type of endpoint
          example: "urn:nuts:endpoint:consent"
        identifier:
          $ref: "#/components/schemas/Identifier"
        status:
          type: string
          enum: ["active", "disabled"]
          description: status of the endpoint
        version:
          type: string
          description: version number of the endpoint, used to distinguish between upgrades of endpoint
        URL:
          type: string
          description: location of the actual en endpoint on the internet
          example: tcp://127.0.0.1:1234, https://nuts.nl/endpoint
    RegisterVendorEvent:
      required:
        - identifier
        - name
        - domain
      properties:
        name:
          type: string
          description: the well-known name for the vendor
          example: Medicare Software for People B.V.
        identifier:
          $ref: "#/components/schemas/Identifier"
        domain:
          $ref: "#/components/schemas/Domain"
        orgKeys:
          type: array
          items:
            $ref: "#/components/schemas/JWK"
    VendorClaimEvent:
      required:
        - vendorIdentifier
        - orgIdentifier
        - orgName
      properties:
        vendorIdentifier:
          $ref: "#/components/schemas/Identifier"
        orgIdentifier:
          $ref: "#/components/schemas/Identifier"
        orgName:
          type: string
          description: the well-known name for the organisation
          example: Kunstgebit Thuiszorg
        orgKeys:
          type: array
          items:
            $ref: "#/components/schemas/JWK"
    RegisterEndpointEvent:
      required:
        - organization
        - endpointType
        - identifier
        - status
        - version
        - URL
      properties:
        organization:
          $ref: "#/components/schemas/Identifier"
        endpointType:
          type: string
          description: URI of the type of endpoint
          example: "urn:nuts:endpoint:consent"
        identifier:
          $ref: "#/components/schemas/Identifier"
        status:
          type: string
          enum: ["active", "disabled"]
          description: status of the endpoint
        version:
          type: string
          description: version number of the endpoint, used to distinguish between upgrades of endpoint
        URL:
          type: string
          description: location of the actual en endpoint on the internet
          example: tcp://127.0.0.1:1234, https://nuts.nl/endpoint
    Identifier:
      type: string
      description: >
        Generic identifier used for representing BSN, agbcode, etc.
        It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
      example: urn:oid:2.16.840.1.113883.2.4.6.3:999999990
    Domain:
      type: string
      enum: [healthcare, personal, insurance]
      description: Domain the entity operates in.
      example: health
    JWK:
      description: as described by https://tools.ietf.org/html/rfc7517. Modelled as object so libraries can parse the tokens themselves.
      additionalProperties: {}
      type: object

