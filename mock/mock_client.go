// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/registry.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	db "github.com/nuts-foundation/nuts-registry/pkg/db"
	reflect "reflect"
)

// MockRegistryClient is a mock of RegistryClient interface
type MockRegistryClient struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryClientMockRecorder
}

// MockRegistryClientMockRecorder is the mock recorder for MockRegistryClient
type MockRegistryClientMockRecorder struct {
	mock *MockRegistryClient
}

// NewMockRegistryClient creates a new mock instance
func NewMockRegistryClient(ctrl *gomock.Controller) *MockRegistryClient {
	mock := &MockRegistryClient{ctrl: ctrl}
	mock.recorder = &MockRegistryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistryClient) EXPECT() *MockRegistryClientMockRecorder {
	return m.recorder
}

// EndpointsByOrganization mocks base method
func (m *MockRegistryClient) EndpointsByOrganization(organizationIdentifier string) ([]db.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointsByOrganization", organizationIdentifier)
	ret0, _ := ret[0].([]db.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointsByOrganization indicates an expected call of EndpointsByOrganization
func (mr *MockRegistryClientMockRecorder) EndpointsByOrganization(organizationIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointsByOrganization", reflect.TypeOf((*MockRegistryClient)(nil).EndpointsByOrganization), organizationIdentifier)
}

// SearchOrganizations mocks base method
func (m *MockRegistryClient) SearchOrganizations(query string) ([]db.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOrganizations", query)
	ret0, _ := ret[0].([]db.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOrganizations indicates an expected call of SearchOrganizations
func (mr *MockRegistryClientMockRecorder) SearchOrganizations(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrganizations", reflect.TypeOf((*MockRegistryClient)(nil).SearchOrganizations), query)
}

// OrganizationById mocks base method
func (m *MockRegistryClient) OrganizationById(id string) (*db.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationById", id)
	ret0, _ := ret[0].(*db.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationById indicates an expected call of OrganizationById
func (mr *MockRegistryClientMockRecorder) OrganizationById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationById", reflect.TypeOf((*MockRegistryClient)(nil).OrganizationById), id)
}
