// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	did "github.com/nuts-foundation/go-did"
	model "github.com/nuts-foundation/nuts-network/pkg/model"
	pkg "github.com/nuts-foundation/nuts-registry/pkg"
	reflect "reflect"
)

// MockDIDStore is a mock of DIDService interface
type MockDIDStore struct {
	ctrl     *gomock.Controller
	recorder *MockDIDStoreMockRecorder
}

// MockDIDStoreMockRecorder is the mock recorder for MockDIDStore
type MockDIDStoreMockRecorder struct {
	mock *MockDIDStore
}

// NewMockDIDStore creates a new mock instance
func NewMockDIDStore(ctrl *gomock.Controller) *MockDIDStore {
	mock := &MockDIDStore{ctrl: ctrl}
	mock.recorder = &MockDIDStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDIDStore) EXPECT() *MockDIDStoreMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *MockDIDStore) Search(onlyOwn bool, tags []string) ([]did.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", onlyOwn, tags)
	ret0, _ := ret[0].([]did.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockDIDStoreMockRecorder) Search(onlyOwn, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDIDStore)(nil).Search), onlyOwn, tags)
}

// Create mocks base method
func (m *MockDIDStore) Create() (*did.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(*did.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockDIDStoreMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDIDStore)(nil).Create))
}

// Get mocks base method
func (m *MockDIDStore) Get(DID did.DID) (*did.Document, *pkg.DIDDocumentMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", DID)
	ret0, _ := ret[0].(*did.Document)
	ret1, _ := ret[1].(*pkg.DIDDocumentMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockDIDStoreMockRecorder) Get(DID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDIDStore)(nil).Get), DID)
}

// GetByTag mocks base method
func (m *MockDIDStore) GetByTag(tag string) (*did.Document, *pkg.DIDDocumentMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTag", tag)
	ret0, _ := ret[0].(*did.Document)
	ret1, _ := ret[1].(*pkg.DIDDocumentMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByTag indicates an expected call of GetByTag
func (mr *MockDIDStoreMockRecorder) GetByTag(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTag", reflect.TypeOf((*MockDIDStore)(nil).GetByTag), tag)
}

// Update mocks base method
func (m *MockDIDStore) Update(DID did.DID, hash model.Hash, nextVersion did.Document) (*did.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", DID, hash, nextVersion)
	ret0, _ := ret[0].(*did.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockDIDStoreMockRecorder) Update(DID, hash, nextVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDIDStore)(nil).Update), DID, hash, nextVersion)
}

// Tag mocks base method
func (m *MockDIDStore) Tag(DID did.DID, tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag", DID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tag indicates an expected call of Tag
func (mr *MockDIDStoreMockRecorder) Tag(DID, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockDIDStore)(nil).Tag), DID, tags)
}
