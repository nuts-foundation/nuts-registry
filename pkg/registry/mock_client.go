// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/registry/client.go

// Package registry is a generated GoMock package.
package registry

import (
	gomock "github.com/golang/mock/gomock"
	pkg "github.com/nuts-foundation/nuts-registry/pkg"
	generated "github.com/nuts-foundation/nuts-registry/pkg/generated"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// EndpointsByOrganization mocks base method
func (m *MockClient) EndpointsByOrganization(legalEntity pkg.LegalEntity) ([]generated.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointsByOrganization", legalEntity)
	ret0, _ := ret[0].([]generated.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointsByOrganization indicates an expected call of EndpointsByOrganization
func (mr *MockClientMockRecorder) EndpointsByOrganization(legalEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointsByOrganization", reflect.TypeOf((*MockClient)(nil).EndpointsByOrganization), legalEntity)
}

// SearchOrganizations mocks base method
func (m *MockClient) SearchOrganizations(query string) ([]generated.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchOrganizations", query)
	ret0, _ := ret[0].([]generated.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOrganizations indicates an expected call of SearchOrganizations
func (mr *MockClientMockRecorder) SearchOrganizations(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrganizations", reflect.TypeOf((*MockClient)(nil).SearchOrganizations), query)
}

// OrganizationById mocks base method
func (m *MockClient) OrganizationById(legalEntity pkg.LegalEntity) (*generated.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationById", legalEntity)
	ret0, _ := ret[0].(*generated.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrganizationById indicates an expected call of OrganizationById
func (mr *MockClientMockRecorder) OrganizationById(legalEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationById", reflect.TypeOf((*MockClient)(nil).OrganizationById), legalEntity)
}
