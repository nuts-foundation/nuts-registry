// Package generated provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Endpoint defines component schema for Endpoint.
type Endpoint struct {
	URL          string     `json:"URL"`
	EndpointType string     `json:"endpointType"`
	Identifier   Identifier `json:"identifier"`
	Status       string     `json:"status"`
	Version      string     `json:"version"`
}

// EndpointOrganization defines component schema for EndpointOrganization.
type EndpointOrganization struct {
	EndpointIdentifier     Identifier `json:"endpointIdentifier"`
	OrganizationIdentifier Identifier `json:"organizationIdentifier"`
	Status                 string     `json:"status"`
}

// Identifier defines component schema for Identifier.
type Identifier struct {
	System string `json:"system"`
	Value  string `json:"value"`
}

// Organization defines component schema for Organization.
type Organization struct {
	Identifier Identifier `json:"identifier"`
	Name       string     `json:"name"`
}

// EndpointsByOrganisationIdParams defines parameters for EndpointsByOrganisationId.
type EndpointsByOrganisationIdParams struct {
	OrgIds []string `json:"orgIds"`
	Type   *string  `json:"type,omitempty"`
}

// SearchOrganizationsParams defines parameters for SearchOrganizations.
type SearchOrganizationsParams struct {
	Query string `json:"query"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find endpoints based on organisation identifiers and type of endpoint (optional) (GET /api/endpoints)
	EndpointsByOrganisationId(ctx echo.Context, params EndpointsByOrganisationIdParams) error
	// Search for organizations (GET /api/organizations)
	SearchOrganizations(ctx echo.Context, params SearchOrganizationsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// EndpointsByOrganisationId converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsByOrganisationId(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params EndpointsByOrganisationIdParams
	// ------------- Required query parameter "orgIds" -------------
	if paramValue := ctx.QueryParam("orgIds"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument orgIds is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "orgIds", ctx.QueryParams(), &params.OrgIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIds: %s", err))
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := ctx.QueryParam("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsByOrganisationId(ctx, params)
	return err
}

// SearchOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) SearchOrganizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params SearchOrganizationsParams
	// ------------- Required query parameter "query" -------------
	if paramValue := ctx.QueryParam("query"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument query is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchOrganizations(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/api/endpoints", wrapper.EndpointsByOrganisationId)
	router.GET("/api/organizations", wrapper.SearchOrganizations)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW227jNhD9lQG3QFuA8SVZIK0AP7RBN2s0TYJcXroIAloay0QlkkuOnHUX/vdiKMuW",
	"ZHsDbC/ok2VR5Jw5c84MP4vUls4aNBRE8lmEdIGlio+/mMxZbYifnbcOPWmMK493V/yTYUi9dqStEYko",
	"bKr4EewcaIGgUqpUAWgANweBNXFFG0JvkIQU+EmVrkCRCEpdMhyOT88Ho8FoME7Gp2dvJSyIXEiGQ1NR",
	"GJhi2BwlpKCV432BvDa5WEvRrD3EhT68x7tpg4x38nPrsB2OfsQLm+H9KhCW2+AnfMCb1JqAh5HoDA3p",
	"uUbPOL7xOBeJeDPcMT3c0Dyc7r5cSxFIURX2sdfvG/ht2KYqRfJBqJT0EoUUmQ5qVmAmng7AWqIP8cD+",
	"+ZsFMFU5Q9+PI6EKmAFZyHQgbfJKhwXMkF4QDVQu9yrD0CO0F3wthcePlfaYMd5OqTp8bUnYwZVRb09r",
	"uVXkjc+V0X8qOpjNb8o5bfItwmZXAGUyaO/lKF1lN8CmX1lB2zp9+n9UwZFCTNsVOJLEFhmXoptcl8QQ",
	"7bKfAMNObYZQf1DLam490EIH6Ihg58fKm0QjzRM/T5Px+fmPhwy3VEWFhwPGJck/OoMXTQtdN6EWkE68",
	"m8k1ZspJuHmcvEdV0CJVHiVcTK6vJNw/TC6xyNAXymQSriaX3qIprISL6wm3jOfU+kw9Z7jEwroSDT2b",
	"ZXr2w3j0qim2YOpsmOW+0Ls8f22bMao8QtYLFsXJH8a+GOCPNsVBaCuiw9bv1ue5t+jguqLwaooxcsfv",
	"T2v+Rpu53Uf00+0UgsNUz/VmtDCeu9sLCOiXOsUAaql0wVoHRREp1+DEY64D+ZWQotApmhDTrdMWl7dX",
	"yzOmgTTFHBg5NFugCdpqQIkYDcaDUfS3Q6OcFok44znF/UPRIlZjqJzejoj4Jsc4O7lkGy+JZOu48POq",
	"rm5o1vgsr0ok9EEkH/bYgEIHYvvb1r6WbQK36I8V+hXzNOisKI/weDf9NkQLQK0jwJAqbpVcEg4RN4tG",
	"INwHphkXdVdC8hXKzSUhSpCwDIeHbZyyLQyHfLt5obxXKxZL/5yHA9MaGA0GwkwC5lF3YD28ez+9O5IH",
	"1VNml8VcFaGTRl+1T/x1cDzhY3anoxH/pNYQ1hciwk80dIXSZndr6hDyJTtub1b7FKxlj4KbX6GBUteu",
	"UUHd0bZykvVCqVYwQ8DS0YqPf/sK8p2Vr+1xYeV6iWz844zt4dYmtd5jShBQ+XRRKzN2hFCVpfIrkYh3",
	"2rRSgJniicBXyGNAeILvCeI7G4Oq4nvWmMpDe7LxuFrL2p22M/uPObTGu3dP+JI37+sUN2wcVmHz97iZ",
	"/mMVdobL31dih9x/Qo1t3fxrCtxUjgeL7VW8UVL3PQ+s9V8BAAD//9acVWw2DQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

