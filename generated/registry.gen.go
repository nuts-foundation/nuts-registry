// Package generated provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Actor defines component schema for Actor.
type Actor struct {
	Identifier Identifier `json:"identifier"`
}

// Endpoint defines component schema for Endpoint.
type Endpoint struct {
	URL          string     `json:"URL"`
	EndpointType string     `json:"endpointType"`
	Identifier   Identifier `json:"identifier"`
	Status       string     `json:"status"`
	Version      string     `json:"version"`
}

// EndpointOrganization defines component schema for EndpointOrganization.
type EndpointOrganization struct {
	EndpointIdentifier     Identifier `json:"endpointIdentifier"`
	OrganizationIdentifier Identifier `json:"organizationIdentifier"`
	Status                 string     `json:"status"`
}

// Identifier defines component schema for Identifier.
type Identifier struct {
	System string `json:"system"`
	Value  string `json:"value"`
}

// Organization defines component schema for Organization.
type Organization struct {
	Actors     []Actor    `json:"actors,omitempty"`
	Identifier Identifier `json:"identifier"`
	Name       string     `json:"name"`
	PublicKey  *string    `json:"publicKey,omitempty"`
}

// EndpointsByOrganisationIdParams defines parameters for EndpointsByOrganisationId.
type EndpointsByOrganisationIdParams struct {
	OrgIds []string `json:"orgIds"`
	Type   *string  `json:"type,omitempty"`
}

// OrganizationActorsParams defines parameters for OrganizationActors.
type OrganizationActorsParams struct {
	ActorId string `json:"actorId"`
}

// SearchOrganizationsParams defines parameters for SearchOrganizations.
type SearchOrganizationsParams struct {
	Query string `json:"query"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find endpoints based on organisation identifiers and type of endpoint (optional) (GET /api/endpoints)
	EndpointsByOrganisationId(ctx echo.Context, params EndpointsByOrganisationIdParams) error
	// Get organization bij id (GET /api/organization/{id})
	OrganizationById(ctx echo.Context, id string) error
	// get actors for given organization, the main question that is answered by this api: may the professional represent the organization? (GET /api/organization/{id}/actors)
	OrganizationActors(ctx echo.Context, id string, params OrganizationActorsParams) error
	// Search for organizations (GET /api/organizations)
	SearchOrganizations(ctx echo.Context, params SearchOrganizationsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// EndpointsByOrganisationId converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsByOrganisationId(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params EndpointsByOrganisationIdParams
	// ------------- Required query parameter "orgIds" -------------
	if paramValue := ctx.QueryParam("orgIds"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument orgIds is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "orgIds", ctx.QueryParams(), &params.OrgIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIds: %s", err))
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := ctx.QueryParam("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsByOrganisationId(ctx, params)
	return err
}

// OrganizationById converts echo context to params.
func (w *ServerInterfaceWrapper) OrganizationById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganizationById(ctx, id)
	return err
}

// OrganizationActors converts echo context to params.
func (w *ServerInterfaceWrapper) OrganizationActors(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params OrganizationActorsParams
	// ------------- Required query parameter "actorId" -------------
	if paramValue := ctx.QueryParam("actorId"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument actorId is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "actorId", ctx.QueryParams(), &params.ActorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter actorId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganizationActors(ctx, id, params)
	return err
}

// SearchOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) SearchOrganizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params SearchOrganizationsParams
	// ------------- Required query parameter "query" -------------
	if paramValue := ctx.QueryParam("query"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument query is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchOrganizations(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/api/endpoints", wrapper.EndpointsByOrganisationId)
	router.GET("/api/organization/:id", wrapper.OrganizationById)
	router.GET("/api/organization/:id/actors", wrapper.OrganizationActors)
	router.GET("/api/organizations", wrapper.SearchOrganizations)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

