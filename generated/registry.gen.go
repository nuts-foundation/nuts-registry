// Package generated provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Actor defines component schema for Actor.
type Actor struct {
	Identifier Identifier `json:"identifier"`
}

// Endpoint defines component schema for Endpoint.
type Endpoint struct {
	URL          string     `json:"URL"`
	EndpointType string     `json:"endpointType"`
	Identifier   Identifier `json:"identifier"`
	Status       string     `json:"status"`
	Version      string     `json:"version"`
}

// EndpointOrganization defines component schema for EndpointOrganization.
type EndpointOrganization struct {
	EndpointIdentifier     Identifier `json:"endpointIdentifier"`
	OrganizationIdentifier Identifier `json:"organizationIdentifier"`
	Status                 string     `json:"status"`
}

// Identifier defines component schema for Identifier.
type Identifier struct {
	System string `json:"system"`
	Value  string `json:"value"`
}

// Organization defines component schema for Organization.
type Organization struct {
	Actors     []Actor    `json:"actors,omitempty"`
	Identifier Identifier `json:"identifier"`
	Name       string     `json:"name"`
}

// EndpointsByOrganisationIdParams defines parameters for EndpointsByOrganisationId.
type EndpointsByOrganisationIdParams struct {
	OrgIds []string `json:"orgIds"`
	Type   *string  `json:"type,omitempty"`
}

// OrganizationActorsParams defines parameters for OrganizationActors.
type OrganizationActorsParams struct {
	ActorId string `json:"actorId"`
}

// SearchOrganizationsParams defines parameters for SearchOrganizations.
type SearchOrganizationsParams struct {
	Query string `json:"query"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find endpoints based on organisation identifiers and type of endpoint (optional) (GET /api/endpoints)
	EndpointsByOrganisationId(ctx echo.Context, params EndpointsByOrganisationIdParams) error
	// Get organization bij id (GET /api/organization/{id})
	OrganizationById(ctx echo.Context, id string) error
	// get actors for given organization, the main question that is answered by this api: may the professional represent the organization? (GET /api/organization/{id}/actors)
	OrganizationActors(ctx echo.Context, id string, params OrganizationActorsParams) error
	// Search for organizations (GET /api/organizations)
	SearchOrganizations(ctx echo.Context, params SearchOrganizationsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// EndpointsByOrganisationId converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsByOrganisationId(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params EndpointsByOrganisationIdParams
	// ------------- Required query parameter "orgIds" -------------
	if paramValue := ctx.QueryParam("orgIds"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument orgIds is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "orgIds", ctx.QueryParams(), &params.OrgIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIds: %s", err))
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := ctx.QueryParam("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsByOrganisationId(ctx, params)
	return err
}

// OrganizationById converts echo context to params.
func (w *ServerInterfaceWrapper) OrganizationById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganizationById(ctx, id)
	return err
}

// OrganizationActors converts echo context to params.
func (w *ServerInterfaceWrapper) OrganizationActors(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params OrganizationActorsParams
	// ------------- Required query parameter "actorId" -------------
	if paramValue := ctx.QueryParam("actorId"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument actorId is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "actorId", ctx.QueryParams(), &params.ActorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter actorId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganizationActors(ctx, id, params)
	return err
}

// SearchOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) SearchOrganizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params SearchOrganizationsParams
	// ------------- Required query parameter "query" -------------
	if paramValue := ctx.QueryParam("query"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument query is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchOrganizations(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/api/endpoints", wrapper.EndpointsByOrganisationId)
	router.GET("/api/organization/:id", wrapper.OrganizationById)
	router.GET("/api/organization/:id/actors", wrapper.OrganizationActors)
	router.GET("/api/organizations", wrapper.SearchOrganizations)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

