// Package generated provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Endpoint defines component schema for Endpoint.
type Endpoint struct {
	URL          string     `json:"URL"`
	EndpointType string     `json:"endpointType"`
	Identifier   Identifier `json:"identifier"`
	Status       string     `json:"status"`
	Version      string     `json:"version"`
}

// EndpointOrganization defines component schema for EndpointOrganization.
type EndpointOrganization struct {
	EndpointIdentifier     Identifier `json:"endpointIdentifier"`
	OrganizationIdentifier Identifier `json:"organizationIdentifier"`
	Status                 string     `json:"status"`
}

// Identifier defines component schema for Identifier.
type Identifier struct {
	System string `json:"system"`
	Value  string `json:"value"`
}

// Organization defines component schema for Organization.
type Organization struct {
	Identifier Identifier `json:"identifier"`
	Name       string     `json:"name"`
}

// EndpointsByOrganisationIdParams defines parameters for EndpointsByOrganisationId.
type EndpointsByOrganisationIdParams struct {
	OrgIds []string `json:"orgIds"`
	Type   *string  `json:"type,omitempty"`
}

// SearchOrganizationsParams defines parameters for SearchOrganizations.
type SearchOrganizationsParams struct {
	Query string `json:"query"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find endpoints based on organisation identifiers and type of endpoint (optional) (GET /api/endpoints)
	EndpointsByOrganisationId(ctx echo.Context, params EndpointsByOrganisationIdParams) error
	// Get organization bij id (GET /api/organization/{id})
	OrganizationById(ctx echo.Context, id string) error
	// Search for organizations (GET /api/organizations)
	SearchOrganizations(ctx echo.Context, params SearchOrganizationsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// EndpointsByOrganisationId converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsByOrganisationId(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params EndpointsByOrganisationIdParams
	// ------------- Required query parameter "orgIds" -------------
	if paramValue := ctx.QueryParam("orgIds"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument orgIds is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "orgIds", ctx.QueryParams(), &params.OrgIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIds: %s", err))
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := ctx.QueryParam("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsByOrganisationId(ctx, params)
	return err
}

// OrganizationById converts echo context to params.
func (w *ServerInterfaceWrapper) OrganizationById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganizationById(ctx, id)
	return err
}

// SearchOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) SearchOrganizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params SearchOrganizationsParams
	// ------------- Required query parameter "query" -------------
	if paramValue := ctx.QueryParam("query"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument query is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchOrganizations(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/api/endpoints", wrapper.EndpointsByOrganisationId)
	router.GET("/api/organization/:id", wrapper.OrganizationById)
	router.GET("/api/organizations", wrapper.SearchOrganizations)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yWbW/bNhDHv8qBHbANUP3QFMgmwC/WYE2NZUmQhzcrgoCWzjI3iWTJk1Mv8HcfjrJs",
	"SbaStHvAXlkWRd7/7n53x0eRmMIajZq8iB+FTxZYyPD4s06tUZr42Tpj0ZHCsHJ7dcY/KfrEKUvKaBGL",
	"3CSSH8HMgRYIMqFS5oAacHMQGB1WlCZ0GklEAj/LwuYoYkGJjYfD8ZvjwWgwGozj8ZujtxEsiKyPh0Nd",
	"kh/ofFgfJSJBK8v7PDmlM7GORL12Exa68m6vprUy3snPjcN2OroWT0yK1ytPWGyNv+YDXiVGezysRKWo",
	"Sc0VOtbxjcO5iMWr4S7Sw02Yh9Pdl+tIeJJU+n3t1ftaflO2LgsRfxQyIbVEEYlUeTnLMRV3B2Qt0flw",
	"YPf8zQLospih69qJoPSYAhlIlSels1L5BcyQHhA1lDZzMkXfCWjH+DoSDj+VymHKelupasVrG4Sd3Cjw",
	"dreOtkReuExq9aekg978Kq1VOtsqrHd5kDqF5l620ia7Fjb9ygyaxunT/yMFPYmYNjPQ48RWGaei7Vw7",
	"iD6Uy74DLDsxKUL1QYXV3DighfLQgmBXj6XTsUKax26exOPj4x8PFdxS5iUeNhiWIv5RKTwoWqiqCTWE",
	"tOxdTM4xlTaCi9vJB5Q5LRLpMIKTyflZBNc3k1PMU3S51GkEZ5NTZ1DnJoKT8wm3jPvEuFTep7jE3NgC",
	"Nd3rZXL0w3j0bFFsxVTecJS7oLfj/LVtRsuiJ1gPmOev/9DmQQN/tEkOQpOIVrR+My7LnEEL5yX5Z10M",
	"llv1frfmb5Sem31FP11OwVtM1FxtRgvrubo8AY9uqRL0IJdS5cw6SApKOQevHWbKk1uJSOQqQe2Du5Xb",
	"4vTybHnEYSBFwQdWDvUWqI02GlAsRoPxYBTq26KWVolYHPGc4v4haRGyMZRWbUdEeJNhmJ2csk0tiXhb",
	"cf7dqsqur9f4LCcLJHRexB/3ogG58sTlbxr7GmXjuUV/KtGtOE6D1op0CLdX0299KAGoOAL0ieRWySlh",
	"E2GzqAHhPjBNOam7FJIrMdpcEgKChIU/PGzDlG1oOFS3mxfSObliWLrn3ByY1sBq0BOmEWAWuAPj4P2H",
	"6VWPH1RNmZ0Xc5n7lhtdau/4a295wgfv3oxG/JMYTVhdiAg/09DmUundrakVkKfKcXuz2g/BOuqE4OIX",
	"qKVUuaspqDraFqeoWijkCmYIWFha8fFvn1G+K+Vz0w9WppbIhd8fsT3dSifGOUwIPEqXLCoyQ0fwZVFI",
	"txKxeK90wwWYSZ4IfIXsE8ITfA+I70wwKvPvmTGZ+eZk43G1jqrqbLax4aNK171V2vzy3er54mTgWwMs",
	"cMi9YYehSp8spX+OwafQa02UL8etGZd+5N6+UOizEN3qahiZtuomQqdIrWWYqd8hhLomoaW5h4b+fl3R",
	"u3drfAqG6wr4jVuHe1L997/g4UU9qQ3G3+5LLwPlC3pTs4v8a/1okzm+ZphOxntpWq//CgAA//9h8+fO",
	"RA8AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

