// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// DIDDocument defines model for DIDDocument.
type DIDDocument map[string]interface{}

// DIDDocumentMetadata defines model for DIDDocumentMetadata.
type DIDDocumentMetadata struct {

	// Date/time at which the document was originally created.
	Created time.Time `json:"created"`

	// Hash (SHA-256, hex-encoded) of DID document bytes. Is equal to payloadHash in network layer.
	Hash string `json:"hash"`

	// Hash (SHA-256, hex-encoded) of the JWS envelope of the first version of the DID document.
	OriginJwsHash string `json:"originJwsHash"`

	// Date/time at which the document (or this version) was updated.
	Updated *time.Time `json:"updated,omitempty"`

	// Semantic version of the DID document.
	Version int `json:"version"`
}

// DIDResolutionResult defines model for DIDResolutionResult.
type DIDResolutionResult struct {

	// The actual DID Document in JSON representation.
	Document         *DIDDocument         `json:"document,omitempty"`
	DocumentMetadata *DIDDocumentMetadata `json:"documentMetadata,omitempty"`

	// Metadata collected during DID Document (a.k.a. DID Resolution Metadata).
	ResolutionMetadata *map[string]interface{} `json:"resolutionMetadata,omitempty"`
}

// SearchDIDParams defines parameters for SearchDID.
type SearchDIDParams struct {

	// URL encoded DID or tag. When given a tag it must resolve to exactly one DID.
	Tags string `json:"tags"`
}

// UpdateDIDJSONBody defines parameters for UpdateDID.
type UpdateDIDJSONBody struct {

	// SHA-256 hash of the last version of the DID Document
	CurrentHash string `json:"currentHash"`

	// The actual DID Document in JSON representation.
	Document DIDDocument `json:"document"`
}

// UpdateDIDTagsJSONBody defines parameters for UpdateDIDTags.
type UpdateDIDTagsJSONBody []string

// UpdateDIDRequestBody defines body for UpdateDID for application/json ContentType.
type UpdateDIDJSONRequestBody UpdateDIDJSONBody

// UpdateDIDTagsRequestBody defines body for UpdateDIDTags for application/json ContentType.
type UpdateDIDTagsJSONRequestBody UpdateDIDTagsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Searches for Nuts DIDs
	// (GET /internal/registry/v1/did)
	SearchDID(ctx echo.Context, params SearchDIDParams) error
	// Creates a new Nuts DID
	// (POST /internal/registry/v1/did)
	CreateDID(ctx echo.Context) error
	// Resolves a Nuts DID Document
	// (GET /internal/registry/v1/did/{didOrTag})
	GetDID(ctx echo.Context, didOrTag string) error
	// Updates a Nuts DID Document
	// (PUT /internal/registry/v1/did/{did})
	UpdateDID(ctx echo.Context, did string) error
	// Replaces the tags of the DID Document.
	// (POST /internal/registry/v1/did/{did}/tag)
	UpdateDIDTags(ctx echo.Context, did string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchDID converts echo context to params.
func (w *ServerInterfaceWrapper) SearchDID(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDIDParams
	// ------------- Required query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, true, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchDID(ctx, params)
	return err
}

// CreateDID converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDID(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDID(ctx)
	return err
}

// GetDID converts echo context to params.
func (w *ServerInterfaceWrapper) GetDID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "didOrTag" -------------
	var didOrTag string

	err = runtime.BindStyledParameter("simple", false, "didOrTag", ctx.Param("didOrTag"), &didOrTag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter didOrTag: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDID(ctx, didOrTag)
	return err
}

// UpdateDID converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameter("simple", false, "did", ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDID(ctx, did)
	return err
}

// UpdateDIDTags converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDIDTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameter("simple", false, "did", ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDIDTags(ctx, did)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/internal/registry/v1/did", wrapper.SearchDID)
	router.POST(baseURL+"/internal/registry/v1/did", wrapper.CreateDID)
	router.GET(baseURL+"/internal/registry/v1/did/:didOrTag", wrapper.GetDID)
	router.PUT(baseURL+"/internal/registry/v1/did/:did", wrapper.UpdateDID)
	router.POST(baseURL+"/internal/registry/v1/did/:did/tag", wrapper.UpdateDIDTags)

}

