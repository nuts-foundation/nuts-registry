// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"github.com/pkg/errors"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// CAListWithChain defines model for CAListWithChain.
type CAListWithChain struct {

	// list of current active (or will be active) vendor CAs. PEM encoded
	CAList []string `json:"CAList"`

	// list of certificates, roots first then intermediates, shared amongst all CAs. PEM encoded.
	Chain []string `json:"chain"`
}

// Domain defines model for Domain.
type Domain string

// Endpoint defines model for Endpoint.
type Endpoint struct {

	// location of the actual en endpoint on the internet
	URL string `json:"URL"`

	// URI of the type of endpoint
	EndpointType string `json:"endpointType"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	Identifier Identifier `json:"identifier"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	Organization Identifier `json:"organization"`

	// A property bag, containing extra properties for endpoints
	Properties *EndpointProperties `json:"properties,omitempty"`

	// status of the endpoint
	Status string `json:"status"`
}

// EndpointProperties defines model for EndpointProperties.
type EndpointProperties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Event defines model for Event.
type Event struct {

	// timestamp at which the event happened
	IssuedAt *time.Time `json:"issuedAt,omitempty"`

	// payload of the event
	Payload *interface{} `json:"payload,omitempty"`

	// JWS (JSON Web Signature) securing the payload's authenticity and integrity.
	Signature *string `json:"signature,omitempty"`

	// type of the event
	Type *string `json:"type,omitempty"`
}

// Identifier defines model for Identifier.
type Identifier string

// JWK defines model for JWK.
type JWK struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Organization defines model for Organization.
type Organization struct {
	Endpoints *[]Endpoint `json:"endpoints,omitempty"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	Identifier Identifier `json:"identifier"`
	Keys       *[]JWK     `json:"keys,omitempty"`

	// the well-known name for the organization
	Name string `json:"name"`

	// PEM encoded public key (deprecated, use JWK)
	PublicKey *string `json:"publicKey,omitempty"`
}

// RegisterEndpointEvent defines model for RegisterEndpointEvent.
type RegisterEndpointEvent struct {

	// location of the actual en endpoint on the internet
	URL string `json:"URL"`

	// URI of the type of endpoint
	EndpointType string `json:"endpointType"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	Identifier Identifier `json:"identifier"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	Organization Identifier `json:"organization"`

	// A property bag, containing extra properties for endpoints
	Properties *EndpointProperties `json:"properties,omitempty"`

	// status of the endpoint
	Status string `json:"status"`
}

// RegisterVendorEvent defines model for RegisterVendorEvent.
type RegisterVendorEvent struct {

	// Domain the entity operates in.
	Domain Domain `json:"domain"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	Identifier Identifier `json:"identifier"`

	// the well-known name for the vendor
	Name    string `json:"name"`
	OrgKeys *[]JWK `json:"orgKeys,omitempty"`
}

// Vendor defines model for Vendor.
type Vendor struct {

	// Domain the entity operates in.
	Domain Domain `json:"domain"`

	// the well-known name for the vendor
	Name string `json:"name"`
}

// VendorClaimEvent defines model for VendorClaimEvent.
type VendorClaimEvent struct {

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	OrgIdentifier Identifier `json:"orgIdentifier"`
	OrgKeys       *[]JWK     `json:"orgKeys,omitempty"`

	// the well-known name for the organisation
	OrgName string `json:"orgName"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	VendorIdentifier Identifier `json:"vendorIdentifier"`
}

// VerifyParams defines parameters for Verify.
type VerifyParams struct {

	// Wheter to fix data in the registry that's broken or requires upgrading
	Fix *bool `json:"fix,omitempty"`
}

// EndpointsByOrganisationIdParams defines parameters for EndpointsByOrganisationId.
type EndpointsByOrganisationIdParams struct {

	// A list of organisation identifiers to query for. identifiers are Nuts Identifiers with proper escaping
	OrgIds []string `json:"orgIds"`

	// The type of endpoint requested, eg Nuts or FHIR
	Type *string `json:"type,omitempty"`

	// only return successfull result if each given organisation has an endpoint of the requested type, otherwise 400
	Strict *bool `json:"strict,omitempty"`
}

// VendorClaimJSONBody defines parameters for VendorClaim.
type VendorClaimJSONBody Organization

// RegisterEndpointJSONBody defines parameters for RegisterEndpoint.
type RegisterEndpointJSONBody Endpoint

// SearchOrganizationsParams defines parameters for SearchOrganizations.
type SearchOrganizationsParams struct {

	// Search string
	Query string `json:"query"`

	// Only return exact matches, for reverse lookup
	Exact *bool `json:"exact,omitempty"`
}

// DeprecatedVendorClaimJSONBody defines parameters for DeprecatedVendorClaim.
type DeprecatedVendorClaimJSONBody Organization

// RegisterVendorJSONBody defines parameters for RegisterVendor.
type RegisterVendorJSONBody Vendor

// VendorClaimRequestBody defines body for VendorClaim for application/json ContentType.
type VendorClaimJSONRequestBody VendorClaimJSONBody

// RegisterEndpointRequestBody defines body for RegisterEndpoint for application/json ContentType.
type RegisterEndpointJSONRequestBody RegisterEndpointJSONBody

// DeprecatedVendorClaimRequestBody defines body for DeprecatedVendorClaim for application/json ContentType.
type DeprecatedVendorClaimJSONRequestBody DeprecatedVendorClaimJSONBody

// RegisterVendorRequestBody defines body for RegisterVendor for application/json ContentType.
type RegisterVendorJSONRequestBody RegisterVendorJSONBody

// Getter for additional properties for EndpointProperties. Returns the specified
// element and whether it was found
func (a EndpointProperties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EndpointProperties
func (a *EndpointProperties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EndpointProperties to handle AdditionalProperties
func (a *EndpointProperties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EndpointProperties to handle AdditionalProperties
func (a EndpointProperties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for JWK. Returns the specified
// element and whether it was found
func (a JWK) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for JWK
func (a *JWK) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for JWK to handle AdditionalProperties
func (a *JWK) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for JWK to handle AdditionalProperties
func (a JWK) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Verify request
	Verify(ctx context.Context, params *VerifyParams) (*http.Response, error)

	// EndpointsByOrganisationId request
	EndpointsByOrganisationId(ctx context.Context, params *EndpointsByOrganisationIdParams) (*http.Response, error)

	// MTLSCAs request
	MTLSCAs(ctx context.Context) (*http.Response, error)

	// MTLSCertificates request
	MTLSCertificates(ctx context.Context) (*http.Response, error)

	// VendorClaim request  with any body
	VendorClaimWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	VendorClaim(ctx context.Context, body VendorClaimJSONRequestBody) (*http.Response, error)

	// OrganizationById request
	OrganizationById(ctx context.Context, id string) (*http.Response, error)

	// RegisterEndpoint request  with any body
	RegisterEndpointWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	RegisterEndpoint(ctx context.Context, id string, body RegisterEndpointJSONRequestBody) (*http.Response, error)

	// RefreshOrganizationCertificate request
	RefreshOrganizationCertificate(ctx context.Context, id string) (*http.Response, error)

	// SearchOrganizations request
	SearchOrganizations(ctx context.Context, params *SearchOrganizationsParams) (*http.Response, error)

	// RefreshVendorCertificate request
	RefreshVendorCertificate(ctx context.Context) (*http.Response, error)

	// DeprecatedVendorClaim request  with any body
	DeprecatedVendorClaimWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	DeprecatedVendorClaim(ctx context.Context, id string, body DeprecatedVendorClaimJSONRequestBody) (*http.Response, error)

	// RegisterVendor request  with any body
	RegisterVendorWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	RegisterVendor(ctx context.Context, body RegisterVendorJSONRequestBody) (*http.Response, error)
}

func (c *Client) Verify(ctx context.Context, params *VerifyParams) (*http.Response, error) {
	req, err := NewVerifyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EndpointsByOrganisationId(ctx context.Context, params *EndpointsByOrganisationIdParams) (*http.Response, error) {
	req, err := NewEndpointsByOrganisationIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) MTLSCAs(ctx context.Context) (*http.Response, error) {
	req, err := NewMTLSCAsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) MTLSCertificates(ctx context.Context) (*http.Response, error) {
	req, err := NewMTLSCertificatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) VendorClaimWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewVendorClaimRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) VendorClaim(ctx context.Context, body VendorClaimJSONRequestBody) (*http.Response, error) {
	req, err := NewVendorClaimRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationById(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewOrganizationByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEndpointWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRegisterEndpointRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEndpoint(ctx context.Context, id string, body RegisterEndpointJSONRequestBody) (*http.Response, error) {
	req, err := NewRegisterEndpointRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshOrganizationCertificate(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewRefreshOrganizationCertificateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SearchOrganizations(ctx context.Context, params *SearchOrganizationsParams) (*http.Response, error) {
	req, err := NewSearchOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshVendorCertificate(ctx context.Context) (*http.Response, error) {
	req, err := NewRefreshVendorCertificateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeprecatedVendorClaimWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeprecatedVendorClaimRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeprecatedVendorClaim(ctx context.Context, id string, body DeprecatedVendorClaimJSONRequestBody) (*http.Response, error) {
	req, err := NewDeprecatedVendorClaimRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterVendorWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRegisterVendorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterVendor(ctx context.Context, body RegisterVendorJSONRequestBody) (*http.Response, error) {
	req, err := NewRegisterVendorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewVerifyRequest generates requests for Verify
func NewVerifyRequest(server string, params *VerifyParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/admin/verify")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Fix != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "fix", *params.Fix); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEndpointsByOrganisationIdRequest generates requests for EndpointsByOrganisationId
func NewEndpointsByOrganisationIdRequest(server string, params *EndpointsByOrganisationIdParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/endpoints")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "orgIds", params.OrgIds); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "type", *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Strict != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "strict", *params.Strict); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMTLSCAsRequest generates requests for MTLSCAs
func NewMTLSCAsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/mtls/cas")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMTLSCertificatesRequest generates requests for MTLSCertificates
func NewMTLSCertificatesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/mtls/certificates")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVendorClaimRequest calls the generic VendorClaim builder with application/json body
func NewVendorClaimRequest(server string, body VendorClaimJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVendorClaimRequestWithBody(server, "application/json", bodyReader)
}

// NewVendorClaimRequestWithBody generates requests for VendorClaim with any type of body
func NewVendorClaimRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/organization")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewOrganizationByIdRequest generates requests for OrganizationById
func NewOrganizationByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/organization/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterEndpointRequest calls the generic RegisterEndpoint builder with application/json body
func NewRegisterEndpointRequest(server string, id string, body RegisterEndpointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterEndpointRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRegisterEndpointRequestWithBody generates requests for RegisterEndpoint with any type of body
func NewRegisterEndpointRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/organization/%s/endpoints", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRefreshOrganizationCertificateRequest generates requests for RefreshOrganizationCertificate
func NewRefreshOrganizationCertificateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/organization/%s/refresh-cert", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchOrganizationsRequest generates requests for SearchOrganizations
func NewSearchOrganizationsRequest(server string, params *SearchOrganizationsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/organizations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "query", params.Query); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Exact != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "exact", *params.Exact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshVendorCertificateRequest generates requests for RefreshVendorCertificate
func NewRefreshVendorCertificateRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/vendor/refresh-cert")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeprecatedVendorClaimRequest calls the generic DeprecatedVendorClaim builder with application/json body
func NewDeprecatedVendorClaimRequest(server string, id string, body DeprecatedVendorClaimJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeprecatedVendorClaimRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeprecatedVendorClaimRequestWithBody generates requests for DeprecatedVendorClaim with any type of body
func NewDeprecatedVendorClaimRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/vendor/%s/claim", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRegisterVendorRequest calls the generic RegisterVendor builder with application/json body
func NewRegisterVendorRequest(server string, body RegisterVendorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterVendorRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterVendorRequestWithBody generates requests for RegisterVendor with any type of body
func NewRegisterVendorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/api/vendors")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

type verifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// list of events that resulted from fixing the data, list may be empty
		Events *[]Event `json:"events,omitempty"`

		// if true, the data in the registry needs fixing/upgrading.
		Fix *bool `json:"fix,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r verifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r verifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type endpointsByOrganisationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r endpointsByOrganisationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r endpointsByOrganisationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type mTLSCAsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CAListWithChain
}

// Status returns HTTPResponse.Status
func (r mTLSCAsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r mTLSCAsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type mTLSCertificatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r mTLSCertificatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r mTLSCertificatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type vendorClaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
}

// Status returns HTTPResponse.Status
func (r vendorClaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r vendorClaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type organizationByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r organizationByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r organizationByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type registerEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
}

// Status returns HTTPResponse.Status
func (r registerEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r registerEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type refreshOrganizationCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
}

// Status returns HTTPResponse.Status
func (r refreshOrganizationCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r refreshOrganizationCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type searchOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r searchOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r searchOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type refreshVendorCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
}

// Status returns HTTPResponse.Status
func (r refreshVendorCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r refreshVendorCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type deprecatedVendorClaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
}

// Status returns HTTPResponse.Status
func (r deprecatedVendorClaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r deprecatedVendorClaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type registerVendorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
}

// Status returns HTTPResponse.Status
func (r registerVendorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r registerVendorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// VerifyWithResponse request returning *VerifyResponse
func (c *ClientWithResponses) VerifyWithResponse(ctx context.Context, params *VerifyParams) (*verifyResponse, error) {
	rsp, err := c.Verify(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseVerifyResponse(rsp)
}

// EndpointsByOrganisationIdWithResponse request returning *EndpointsByOrganisationIdResponse
func (c *ClientWithResponses) EndpointsByOrganisationIdWithResponse(ctx context.Context, params *EndpointsByOrganisationIdParams) (*endpointsByOrganisationIdResponse, error) {
	rsp, err := c.EndpointsByOrganisationId(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseEndpointsByOrganisationIdResponse(rsp)
}

// MTLSCAsWithResponse request returning *MTLSCAsResponse
func (c *ClientWithResponses) MTLSCAsWithResponse(ctx context.Context) (*mTLSCAsResponse, error) {
	rsp, err := c.MTLSCAs(ctx)
	if err != nil {
		return nil, err
	}
	return ParseMTLSCAsResponse(rsp)
}

// MTLSCertificatesWithResponse request returning *MTLSCertificatesResponse
func (c *ClientWithResponses) MTLSCertificatesWithResponse(ctx context.Context) (*mTLSCertificatesResponse, error) {
	rsp, err := c.MTLSCertificates(ctx)
	if err != nil {
		return nil, err
	}
	return ParseMTLSCertificatesResponse(rsp)
}

// VendorClaimWithBodyWithResponse request with arbitrary body returning *VendorClaimResponse
func (c *ClientWithResponses) VendorClaimWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*vendorClaimResponse, error) {
	rsp, err := c.VendorClaimWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseVendorClaimResponse(rsp)
}

func (c *ClientWithResponses) VendorClaimWithResponse(ctx context.Context, body VendorClaimJSONRequestBody) (*vendorClaimResponse, error) {
	rsp, err := c.VendorClaim(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseVendorClaimResponse(rsp)
}

// OrganizationByIdWithResponse request returning *OrganizationByIdResponse
func (c *ClientWithResponses) OrganizationByIdWithResponse(ctx context.Context, id string) (*organizationByIdResponse, error) {
	rsp, err := c.OrganizationById(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationByIdResponse(rsp)
}

// RegisterEndpointWithBodyWithResponse request with arbitrary body returning *RegisterEndpointResponse
func (c *ClientWithResponses) RegisterEndpointWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*registerEndpointResponse, error) {
	rsp, err := c.RegisterEndpointWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRegisterEndpointResponse(rsp)
}

func (c *ClientWithResponses) RegisterEndpointWithResponse(ctx context.Context, id string, body RegisterEndpointJSONRequestBody) (*registerEndpointResponse, error) {
	rsp, err := c.RegisterEndpoint(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseRegisterEndpointResponse(rsp)
}

// RefreshOrganizationCertificateWithResponse request returning *RefreshOrganizationCertificateResponse
func (c *ClientWithResponses) RefreshOrganizationCertificateWithResponse(ctx context.Context, id string) (*refreshOrganizationCertificateResponse, error) {
	rsp, err := c.RefreshOrganizationCertificate(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseRefreshOrganizationCertificateResponse(rsp)
}

// SearchOrganizationsWithResponse request returning *SearchOrganizationsResponse
func (c *ClientWithResponses) SearchOrganizationsWithResponse(ctx context.Context, params *SearchOrganizationsParams) (*searchOrganizationsResponse, error) {
	rsp, err := c.SearchOrganizations(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSearchOrganizationsResponse(rsp)
}

// RefreshVendorCertificateWithResponse request returning *RefreshVendorCertificateResponse
func (c *ClientWithResponses) RefreshVendorCertificateWithResponse(ctx context.Context) (*refreshVendorCertificateResponse, error) {
	rsp, err := c.RefreshVendorCertificate(ctx)
	if err != nil {
		return nil, err
	}
	return ParseRefreshVendorCertificateResponse(rsp)
}

// DeprecatedVendorClaimWithBodyWithResponse request with arbitrary body returning *DeprecatedVendorClaimResponse
func (c *ClientWithResponses) DeprecatedVendorClaimWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*deprecatedVendorClaimResponse, error) {
	rsp, err := c.DeprecatedVendorClaimWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeprecatedVendorClaimResponse(rsp)
}

func (c *ClientWithResponses) DeprecatedVendorClaimWithResponse(ctx context.Context, id string, body DeprecatedVendorClaimJSONRequestBody) (*deprecatedVendorClaimResponse, error) {
	rsp, err := c.DeprecatedVendorClaim(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseDeprecatedVendorClaimResponse(rsp)
}

// RegisterVendorWithBodyWithResponse request with arbitrary body returning *RegisterVendorResponse
func (c *ClientWithResponses) RegisterVendorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*registerVendorResponse, error) {
	rsp, err := c.RegisterVendorWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRegisterVendorResponse(rsp)
}

func (c *ClientWithResponses) RegisterVendorWithResponse(ctx context.Context, body RegisterVendorJSONRequestBody) (*registerVendorResponse, error) {
	rsp, err := c.RegisterVendor(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseRegisterVendorResponse(rsp)
}

// ParseVerifyResponse parses an HTTP response from a VerifyWithResponse call
func ParseVerifyResponse(rsp *http.Response) (*verifyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &verifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// list of events that resulted from fixing the data, list may be empty
			Events *[]Event `json:"events,omitempty"`

			// if true, the data in the registry needs fixing/upgrading.
			Fix *bool `json:"fix,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndpointsByOrganisationIdResponse parses an HTTP response from a EndpointsByOrganisationIdWithResponse call
func ParseEndpointsByOrganisationIdResponse(rsp *http.Response) (*endpointsByOrganisationIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &endpointsByOrganisationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseMTLSCAsResponse parses an HTTP response from a MTLSCAsWithResponse call
func ParseMTLSCAsResponse(rsp *http.Response) (*mTLSCAsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &mTLSCAsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CAListWithChain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/x-pem-file) unsupported

	}

	return response, nil
}

// ParseMTLSCertificatesResponse parses an HTTP response from a MTLSCertificatesWithResponse call
func ParseMTLSCertificatesResponse(rsp *http.Response) (*mTLSCertificatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &mTLSCertificatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/x-pem-file) unsupported

	}

	return response, nil
}

// ParseVendorClaimResponse parses an HTTP response from a VendorClaimWithResponse call
func ParseVendorClaimResponse(rsp *http.Response) (*vendorClaimResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &vendorClaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationByIdResponse parses an HTTP response from a OrganizationByIdWithResponse call
func ParseOrganizationByIdResponse(rsp *http.Response) (*organizationByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &organizationByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseRegisterEndpointResponse parses an HTTP response from a RegisterEndpointWithResponse call
func ParseRegisterEndpointResponse(rsp *http.Response) (*registerEndpointResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &registerEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRefreshOrganizationCertificateResponse parses an HTTP response from a RefreshOrganizationCertificateWithResponse call
func ParseRefreshOrganizationCertificateResponse(rsp *http.Response) (*refreshOrganizationCertificateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &refreshOrganizationCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSearchOrganizationsResponse parses an HTTP response from a SearchOrganizationsWithResponse call
func ParseSearchOrganizationsResponse(rsp *http.Response) (*searchOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &searchOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseRefreshVendorCertificateResponse parses an HTTP response from a RefreshVendorCertificateWithResponse call
func ParseRefreshVendorCertificateResponse(rsp *http.Response) (*refreshVendorCertificateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &refreshVendorCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeprecatedVendorClaimResponse parses an HTTP response from a DeprecatedVendorClaimWithResponse call
func ParseDeprecatedVendorClaimResponse(rsp *http.Response) (*deprecatedVendorClaimResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &deprecatedVendorClaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRegisterVendorResponse parses an HTTP response from a RegisterVendorWithResponse call
func ParseRegisterVendorResponse(rsp *http.Response) (*registerVendorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &registerVendorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Verifies the registry data (owned by the vendor) and fixes where necessarry (e.g. issue certificates) if fix = true.
	// (POST /api/admin/verify)
	Verify(ctx echo.Context, params VerifyParams) error
	// Find endpoints based on organisation identifiers and type of endpoint (optional)
	// (GET /api/endpoints)
	EndpointsByOrganisationId(ctx echo.Context, params EndpointsByOrganisationIdParams) error
	// Get a list of current active vendor CAs
	// (GET /api/mtls/cas)
	MTLSCAs(ctx echo.Context) error
	// Get a list of current active certificates that may be used to setup a mTLS connection
	// (GET /api/mtls/certificates)
	MTLSCertificates(ctx echo.Context) error
	// Claim an organization for the current vendor (registers an organization under the vendor in the registry).
	// (POST /api/organization)
	VendorClaim(ctx echo.Context) error
	// Get organization by id
	// (GET /api/organization/{id})
	OrganizationById(ctx echo.Context, id string) error
	// Adds/updates an endpoint for this organisation to the registry. If the endpoint already exists (matched by endpoint ID) it is updated.
	// (POST /api/organization/{id}/endpoints)
	RegisterEndpoint(ctx echo.Context, id string) error
	// Refreshes the organization's certificate.
	// (POST /api/organization/{id}/refresh-cert)
	RefreshOrganizationCertificate(ctx echo.Context, id string) error
	// Search for organizations
	// (GET /api/organizations)
	SearchOrganizations(ctx echo.Context, params SearchOrganizationsParams) error
	// Refreshes the vendor's certificate.
	// (POST /api/vendor/refresh-cert)
	RefreshVendorCertificate(ctx echo.Context) error
	// Claim an organization for a vendor (registers an organization under a vendor in the registry).
	// (POST /api/vendor/{id}/claim)
	DeprecatedVendorClaim(ctx echo.Context, id string) error
	// Adds a vendor to the registry
	// (POST /api/vendors)
	RegisterVendor(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Verify converts echo context to params.
func (w *ServerInterfaceWrapper) Verify(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyParams
	// ------------- Optional query parameter "fix" -------------

	err = runtime.BindQueryParameter("form", true, false, "fix", ctx.QueryParams(), &params.Fix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fix: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Verify(ctx, params)
	return err
}

// EndpointsByOrganisationId converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsByOrganisationId(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params EndpointsByOrganisationIdParams
	// ------------- Required query parameter "orgIds" -------------

	err = runtime.BindQueryParameter("form", true, true, "orgIds", ctx.QueryParams(), &params.OrgIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIds: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "strict" -------------

	err = runtime.BindQueryParameter("form", true, false, "strict", ctx.QueryParams(), &params.Strict)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter strict: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsByOrganisationId(ctx, params)
	return err
}

// MTLSCAs converts echo context to params.
func (w *ServerInterfaceWrapper) MTLSCAs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MTLSCAs(ctx)
	return err
}

// MTLSCertificates converts echo context to params.
func (w *ServerInterfaceWrapper) MTLSCertificates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MTLSCertificates(ctx)
	return err
}

// VendorClaim converts echo context to params.
func (w *ServerInterfaceWrapper) VendorClaim(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VendorClaim(ctx)
	return err
}

// OrganizationById converts echo context to params.
func (w *ServerInterfaceWrapper) OrganizationById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganizationById(ctx, id)
	return err
}

// RegisterEndpoint converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterEndpoint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterEndpoint(ctx, id)
	return err
}

// RefreshOrganizationCertificate converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshOrganizationCertificate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RefreshOrganizationCertificate(ctx, id)
	return err
}

// SearchOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) SearchOrganizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchOrganizationsParams
	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "exact" -------------

	err = runtime.BindQueryParameter("form", true, false, "exact", ctx.QueryParams(), &params.Exact)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exact: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchOrganizations(ctx, params)
	return err
}

// RefreshVendorCertificate converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshVendorCertificate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RefreshVendorCertificate(ctx)
	return err
}

// DeprecatedVendorClaim converts echo context to params.
func (w *ServerInterfaceWrapper) DeprecatedVendorClaim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeprecatedVendorClaim(ctx, id)
	return err
}

// RegisterVendor converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterVendor(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterVendor(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/api/admin/verify", wrapper.Verify)
	router.GET("/api/endpoints", wrapper.EndpointsByOrganisationId)
	router.GET("/api/mtls/cas", wrapper.MTLSCAs)
	router.GET("/api/mtls/certificates", wrapper.MTLSCertificates)
	router.POST("/api/organization", wrapper.VendorClaim)
	router.GET("/api/organization/:id", wrapper.OrganizationById)
	router.POST("/api/organization/:id/endpoints", wrapper.RegisterEndpoint)
	router.POST("/api/organization/:id/refresh-cert", wrapper.RefreshOrganizationCertificate)
	router.GET("/api/organizations", wrapper.SearchOrganizations)
	router.POST("/api/vendor/refresh-cert", wrapper.RefreshVendorCertificate)
	router.POST("/api/vendor/:id/claim", wrapper.DeprecatedVendorClaim)
	router.POST("/api/vendors", wrapper.RegisterVendor)

}

