// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"github.com/pkg/errors"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
)

// Endpoint defines model for Endpoint.
type Endpoint struct {
	URL          string     `json:"URL"`
	EndpointType string     `json:"endpointType"`
	Identifier   Identifier `json:"identifier"`
	Status       string     `json:"status"`
	Version      string     `json:"version"`
}

// Event defines model for Event.
type Event struct {
	IssuedAt *time.Time              `json:"issuedAt,omitempty"`
	Payload  *map[string]interface{} `json:"payload,omitempty"`
	Type     *string                 `json:"type,omitempty"`
}

// Identifier defines model for Identifier.
type Identifier string

// JWK defines model for JWK.
type JWK struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Organization defines model for Organization.
type Organization struct {
	Endpoints  *[]Endpoint `json:"endpoints,omitempty"`
	Identifier Identifier  `json:"identifier"`
	Keys       *[]JWK      `json:"keys,omitempty"`
	Name       string      `json:"name"`
	PublicKey  *string     `json:"publicKey,omitempty"`
}

// Vendor defines model for Vendor.
type Vendor struct {
	Identifier Identifier `json:"identifier"`
	Name       string     `json:"name"`
}

// EndpointsByOrganisationIdParams defines parameters for EndpointsByOrganisationId.
type EndpointsByOrganisationIdParams struct {
	OrgIds []string `json:"orgIds"`
	Type   *string  `json:"type,omitempty"`
	Strict *bool    `json:"strict,omitempty"`
}

// registerEndpointJSONBody defines parameters for RegisterEndpoint.
type registerEndpointJSONBody Endpoint

// SearchOrganizationsParams defines parameters for SearchOrganizations.
type SearchOrganizationsParams struct {
	Query string `json:"query"`
	Exact *bool  `json:"exact,omitempty"`
}

// vendorClaimJSONBody defines parameters for VendorClaim.
type vendorClaimJSONBody Organization

// registerVendorJSONBody defines parameters for RegisterVendor.
type registerVendorJSONBody Vendor

// RegisterEndpointRequestBody defines body for RegisterEndpoint for application/json ContentType.
type RegisterEndpointJSONRequestBody registerEndpointJSONBody

// VendorClaimRequestBody defines body for VendorClaim for application/json ContentType.
type VendorClaimJSONRequestBody vendorClaimJSONBody

// RegisterVendorRequestBody defines body for RegisterVendor for application/json ContentType.
type RegisterVendorJSONRequestBody registerVendorJSONBody

// Getter for additional properties for JWK. Returns the specified
// element and whether it was found
func (a JWK) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for JWK
func (a *JWK) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for JWK to handle AdditionalProperties
func (a *JWK) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for JWK to handle AdditionalProperties
func (a JWK) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(req *http.Request, ctx context.Context) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// HTTP client with any customized settings, such as certificate chains.
	Client http.Client

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// The interface specification for the client above.
type ClientInterface interface {
	// EndpointsByOrganisationId request
	EndpointsByOrganisationId(ctx context.Context, params *EndpointsByOrganisationIdParams) (*http.Response, error)

	// OrganizationById request
	OrganizationById(ctx context.Context, id string) (*http.Response, error)

	// RegisterEndpoint request  with any body
	RegisterEndpointWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	RegisterEndpoint(ctx context.Context, id string, body RegisterEndpointJSONRequestBody) (*http.Response, error)

	// SearchOrganizations request
	SearchOrganizations(ctx context.Context, params *SearchOrganizationsParams) (*http.Response, error)

	// VendorClaim request  with any body
	VendorClaimWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	VendorClaim(ctx context.Context, id string, body VendorClaimJSONRequestBody) (*http.Response, error)

	// RegisterVendor request  with any body
	RegisterVendorWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	RegisterVendor(ctx context.Context, body RegisterVendorJSONRequestBody) (*http.Response, error)
}

func (c *Client) EndpointsByOrganisationId(ctx context.Context, params *EndpointsByOrganisationIdParams) (*http.Response, error) {
	req, err := NewEndpointsByOrganisationIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationById(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewOrganizationByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEndpointWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRegisterEndpointRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEndpoint(ctx context.Context, id string, body RegisterEndpointJSONRequestBody) (*http.Response, error) {
	req, err := NewRegisterEndpointRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SearchOrganizations(ctx context.Context, params *SearchOrganizationsParams) (*http.Response, error) {
	req, err := NewSearchOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) VendorClaimWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewVendorClaimRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) VendorClaim(ctx context.Context, id string, body VendorClaimJSONRequestBody) (*http.Response, error) {
	req, err := NewVendorClaimRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterVendorWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRegisterVendorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterVendor(ctx context.Context, body RegisterVendorJSONRequestBody) (*http.Response, error) {
	req, err := NewRegisterVendorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewEndpointsByOrganisationIdRequest generates requests for EndpointsByOrganisationId
func NewEndpointsByOrganisationIdRequest(server string, params *EndpointsByOrganisationIdParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/api/endpoints", server)

	var queryStrings []string

	var queryParam0 string

	queryParam0, err = runtime.StyleParam("form", true, "orgIds", params.OrgIds)
	if err != nil {
		return nil, err
	}

	queryStrings = append(queryStrings, queryParam0)

	var queryParam1 string
	if params.Type != nil {

		queryParam1, err = runtime.StyleParam("form", true, "type", *params.Type)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	var queryParam2 string
	if params.Strict != nil {

		queryParam2, err = runtime.StyleParam("form", true, "strict", *params.Strict)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam2)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationByIdRequest generates requests for OrganizationById
func NewOrganizationByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/api/organization/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterEndpointRequest calls the generic RegisterEndpoint builder with application/json body
func NewRegisterEndpointRequest(server string, id string, body RegisterEndpointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterEndpointRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRegisterEndpointRequestWithBody generates requests for RegisterEndpoint with any type of body
func NewRegisterEndpointRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/api/organization/%s/endpoints", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewSearchOrganizationsRequest generates requests for SearchOrganizations
func NewSearchOrganizationsRequest(server string, params *SearchOrganizationsParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/api/organizations", server)

	var queryStrings []string

	var queryParam0 string

	queryParam0, err = runtime.StyleParam("form", true, "query", params.Query)
	if err != nil {
		return nil, err
	}

	queryStrings = append(queryStrings, queryParam0)

	var queryParam1 string
	if params.Exact != nil {

		queryParam1, err = runtime.StyleParam("form", true, "exact", *params.Exact)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVendorClaimRequest calls the generic VendorClaim builder with application/json body
func NewVendorClaimRequest(server string, id string, body VendorClaimJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVendorClaimRequestWithBody(server, id, "application/json", bodyReader)
}

// NewVendorClaimRequestWithBody generates requests for VendorClaim with any type of body
func NewVendorClaimRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/api/vendor/%s/claim", server, pathParam0)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRegisterVendorRequest calls the generic RegisterVendor builder with application/json body
func NewRegisterVendorRequest(server string, body RegisterVendorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterVendorRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterVendorRequestWithBody generates requests for RegisterVendor with any type of body
func NewRegisterVendorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/api/vendors", server)

	req, err := http.NewRequest("POST", queryUrl, body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses returns a ClientWithResponses with a default Client:
func NewClientWithResponses(server string) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client: http.Client{},
			Server: server,
		},
	}
}

// NewClientWithResponsesAndRequestEditorFunc takes in a RequestEditorFn callback function and returns a ClientWithResponses with a default Client:
func NewClientWithResponsesAndRequestEditorFunc(server string, reqEditorFn RequestEditorFn) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client:        http.Client{},
			Server:        server,
			RequestEditor: reqEditorFn,
		},
	}
}

type endpointsByOrganisationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r endpointsByOrganisationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r endpointsByOrganisationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type organizationByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r organizationByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r organizationByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type registerEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Event
}

// Status returns HTTPResponse.Status
func (r registerEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r registerEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type searchOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r searchOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r searchOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type vendorClaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Event
}

// Status returns HTTPResponse.Status
func (r vendorClaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r vendorClaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type registerVendorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Event
}

// Status returns HTTPResponse.Status
func (r registerVendorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r registerVendorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// EndpointsByOrganisationIdWithResponse request returning *EndpointsByOrganisationIdResponse
func (c *ClientWithResponses) EndpointsByOrganisationIdWithResponse(ctx context.Context, params *EndpointsByOrganisationIdParams) (*endpointsByOrganisationIdResponse, error) {
	rsp, err := c.EndpointsByOrganisationId(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseendpointsByOrganisationIdResponse(rsp)
}

// OrganizationByIdWithResponse request returning *OrganizationByIdResponse
func (c *ClientWithResponses) OrganizationByIdWithResponse(ctx context.Context, id string) (*organizationByIdResponse, error) {
	rsp, err := c.OrganizationById(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseorganizationByIdResponse(rsp)
}

// RegisterEndpointWithBodyWithResponse request with arbitrary body returning *RegisterEndpointResponse
func (c *ClientWithResponses) RegisterEndpointWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*registerEndpointResponse, error) {
	rsp, err := c.RegisterEndpointWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseregisterEndpointResponse(rsp)
}

func (c *ClientWithResponses) RegisterEndpointWithResponse(ctx context.Context, id string, body RegisterEndpointJSONRequestBody) (*registerEndpointResponse, error) {
	rsp, err := c.RegisterEndpoint(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseregisterEndpointResponse(rsp)
}

// SearchOrganizationsWithResponse request returning *SearchOrganizationsResponse
func (c *ClientWithResponses) SearchOrganizationsWithResponse(ctx context.Context, params *SearchOrganizationsParams) (*searchOrganizationsResponse, error) {
	rsp, err := c.SearchOrganizations(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParsesearchOrganizationsResponse(rsp)
}

// VendorClaimWithBodyWithResponse request with arbitrary body returning *VendorClaimResponse
func (c *ClientWithResponses) VendorClaimWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*vendorClaimResponse, error) {
	rsp, err := c.VendorClaimWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsevendorClaimResponse(rsp)
}

func (c *ClientWithResponses) VendorClaimWithResponse(ctx context.Context, id string, body VendorClaimJSONRequestBody) (*vendorClaimResponse, error) {
	rsp, err := c.VendorClaim(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsevendorClaimResponse(rsp)
}

// RegisterVendorWithBodyWithResponse request with arbitrary body returning *RegisterVendorResponse
func (c *ClientWithResponses) RegisterVendorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*registerVendorResponse, error) {
	rsp, err := c.RegisterVendorWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseregisterVendorResponse(rsp)
}

func (c *ClientWithResponses) RegisterVendorWithResponse(ctx context.Context, body RegisterVendorJSONRequestBody) (*registerVendorResponse, error) {
	rsp, err := c.RegisterVendor(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseregisterVendorResponse(rsp)
}

// ParseendpointsByOrganisationIdResponse parses an HTTP response from a EndpointsByOrganisationIdWithResponse call
func ParseendpointsByOrganisationIdResponse(rsp *http.Response) (*endpointsByOrganisationIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &endpointsByOrganisationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported
	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported
	}

	return response, nil
}

// ParseorganizationByIdResponse parses an HTTP response from a OrganizationByIdWithResponse call
func ParseorganizationByIdResponse(rsp *http.Response) (*organizationByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &organizationByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported
	case rsp.StatusCode == 404:
		// Content-type (text/plain) unsupported
	}

	return response, nil
}

// ParseregisterEndpointResponse parses an HTTP response from a RegisterEndpointWithResponse call
func ParseregisterEndpointResponse(rsp *http.Response) (*registerEndpointResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &registerEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		response.JSON201 = &Event{}
		if err := json.Unmarshal(bodyBytes, response.JSON201); err != nil {
			return nil, err
		}
	case rsp.StatusCode == 400:
		break // No content-type
	}

	return response, nil
}

// ParsesearchOrganizationsResponse parses an HTTP response from a SearchOrganizationsWithResponse call
func ParsesearchOrganizationsResponse(rsp *http.Response) (*searchOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &searchOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported
	case rsp.StatusCode == 400:
		// Content-type (text/plain) unsupported
	}

	return response, nil
}

// ParsevendorClaimResponse parses an HTTP response from a VendorClaimWithResponse call
func ParsevendorClaimResponse(rsp *http.Response) (*vendorClaimResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &vendorClaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		response.JSON201 = &Event{}
		if err := json.Unmarshal(bodyBytes, response.JSON201); err != nil {
			return nil, err
		}
	case rsp.StatusCode == 400:
		break // No content-type
	}

	return response, nil
}

// ParseregisterVendorResponse parses an HTTP response from a RegisterVendorWithResponse call
func ParseregisterVendorResponse(rsp *http.Response) (*registerVendorResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &registerVendorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		response.JSON201 = &Event{}
		if err := json.Unmarshal(bodyBytes, response.JSON201); err != nil {
			return nil, err
		}
	case rsp.StatusCode == 400:
		break // No content-type
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find endpoints based on organisation identifiers and type of endpoint (optional)// (GET /api/endpoints)
	EndpointsByOrganisationId(ctx echo.Context, params EndpointsByOrganisationIdParams) error
	// Get organization by id// (GET /api/organization/{id})
	OrganizationById(ctx echo.Context, id string) error
	// Adds an endpoint for this organisation to the registry// (POST /api/organization/{id}/endpoints)
	RegisterEndpoint(ctx echo.Context, id string) error
	// Search for organizations// (GET /api/organizations)
	SearchOrganizations(ctx echo.Context, params SearchOrganizationsParams) error
	// Claim an organization for a vendor (registers an organization under a vendor in the registry).// (POST /api/vendor/{id}/claim)
	VendorClaim(ctx echo.Context, id string) error
	// Adds a vendor to the registry// (POST /api/vendors)
	RegisterVendor(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// EndpointsByOrganisationId converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsByOrganisationId(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params EndpointsByOrganisationIdParams
	// ------------- Required query parameter "orgIds" -------------
	if paramValue := ctx.QueryParam("orgIds"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument orgIds is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "orgIds", ctx.QueryParams(), &params.OrgIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIds: %s", err))
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := ctx.QueryParam("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "strict" -------------
	if paramValue := ctx.QueryParam("strict"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "strict", ctx.QueryParams(), &params.Strict)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter strict: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsByOrganisationId(ctx, params)
	return err
}

// OrganizationById converts echo context to params.
func (w *ServerInterfaceWrapper) OrganizationById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganizationById(ctx, id)
	return err
}

// RegisterEndpoint converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterEndpoint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterEndpoint(ctx, id)
	return err
}

// SearchOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) SearchOrganizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchOrganizationsParams
	// ------------- Required query parameter "query" -------------
	if paramValue := ctx.QueryParam("query"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument query is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "exact" -------------
	if paramValue := ctx.QueryParam("exact"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exact", ctx.QueryParams(), &params.Exact)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exact: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchOrganizations(ctx, params)
	return err
}

// VendorClaim converts echo context to params.
func (w *ServerInterfaceWrapper) VendorClaim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.VendorClaim(ctx, id)
	return err
}

// RegisterVendor converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterVendor(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterVendor(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/api/endpoints", wrapper.EndpointsByOrganisationId)
	router.GET("/api/organization/:id", wrapper.OrganizationById)
	router.POST("/api/organization/:id/endpoints", wrapper.RegisterEndpoint)
	router.GET("/api/organizations", wrapper.SearchOrganizations)
	router.POST("/api/vendor/:id/claim", wrapper.VendorClaim)
	router.POST("/api/vendors", wrapper.RegisterVendor)

}

