/*
 * Nuts registry
 * Copyright (C) 2019. Nuts community
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

// Package api provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"io"
	"net/http"
	"strings"
)

// Actor defines component schema for Actor.
type Actor struct {
	Identifier Identifier `json:"identifier"`
}

// Endpoint defines component schema for Endpoint.
type Endpoint struct {
	URL          string     `json:"URL"`
	EndpointType string     `json:"endpointType"`
	Identifier   Identifier `json:"identifier"`
	Status       string     `json:"status"`
	Version      string     `json:"version"`
}

// EndpointOrganization defines component schema for EndpointOrganization.
type EndpointOrganization struct {
	Endpoint     Identifier `json:"endpoint"`
	Organization Identifier `json:"organization"`
	Status       string     `json:"status"`
}

// Identifier defines component schema for Identifier.
type Identifier string

// Organization defines component schema for Organization.
type Organization struct {
	Actors     []Actor    `json:"actors,omitempty"`
	Endpoints  []Endpoint `json:"endpoints,omitempty"`
	Identifier Identifier `json:"identifier"`
	Name       string     `json:"name"`
	PublicKey  *string    `json:"publicKey,omitempty"`
}

// Client which conforms to the OpenAPI3 specification for this service. The
// server should be fully qualified with shema and server, ie,
// https://deepmap.com.
type Client struct {
	Server string
	Client http.Client
}

// EndpointsByOrganisationId request
func (c *Client) EndpointsByOrganisationId(ctx context.Context, params *EndpointsByOrganisationIdParams) (*http.Response, error) {
	req, err := NewEndpointsByOrganisationIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	return c.Client.Do(req)
}

// DeregisterOrganization request
func (c *Client) DeregisterOrganization(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeregisterOrganizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	return c.Client.Do(req)
}

// OrganizationById request
func (c *Client) OrganizationById(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewOrganizationByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	return c.Client.Do(req)
}

// OrganizationActors request
func (c *Client) OrganizationActors(ctx context.Context, id string, params *OrganizationActorsParams) (*http.Response, error) {
	req, err := NewOrganizationActorsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	return c.Client.Do(req)
}

// SearchOrganizations request
func (c *Client) SearchOrganizations(ctx context.Context, params *SearchOrganizationsParams) (*http.Response, error) {
	req, err := NewSearchOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	return c.Client.Do(req)
}

// RegisterOrganization request with JSON body
func (c *Client) RegisterOrganization(ctx context.Context, body Organization) (*http.Response, error) {
	req, err := NewRegisterOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	return c.Client.Do(req)
}

// NewEndpointsByOrganisationIdRequest generates requests for EndpointsByOrganisationId
func NewEndpointsByOrganisationIdRequest(server string, params *EndpointsByOrganisationIdParams) (*http.Request, error) {
	var err error

	queryURL := fmt.Sprintf("%s/api/endpoints", server)

	var queryStrings []string

	var queryParam0 string

	queryParam0, err = runtime.StyleParam("form", true, "orgIds", params.OrgIds)
	if err != nil {
		return nil, err
	}

	queryStrings = append(queryStrings, queryParam0)

	var queryParam1 string
	if params.Type != nil {

		queryParam1, err = runtime.StyleParam("form", true, "type", *params.Type)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam1)
	}

	if len(queryStrings) != 0 {
		queryURL += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryURL, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeregisterOrganizationRequest generates requests for DeregisterOrganization
func NewDeregisterOrganizationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryURL := fmt.Sprintf("%s/api/organization/%s", server, pathParam0)

	req, err := http.NewRequest("DELETE", queryURL, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationByIdRequest generates requests for OrganizationById
func NewOrganizationByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryURL := fmt.Sprintf("%s/api/organization/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryURL, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationActorsRequest generates requests for OrganizationActors
func NewOrganizationActorsRequest(server string, id string, params *OrganizationActorsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryURL := fmt.Sprintf("%s/api/organization/%s/actors", server, pathParam0)

	var queryStrings []string

	var queryParam0 string

	queryParam0, err = runtime.StyleParam("form", true, "actorId", params.ActorId)
	if err != nil {
		return nil, err
	}

	queryStrings = append(queryStrings, queryParam0)

	if len(queryStrings) != 0 {
		queryURL += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryURL, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchOrganizationsRequest generates requests for SearchOrganizations
func NewSearchOrganizationsRequest(server string, params *SearchOrganizationsParams) (*http.Request, error) {
	var err error

	queryURL := fmt.Sprintf("%s/api/organizations", server)

	var queryStrings []string

	var queryParam0 string

	queryParam0, err = runtime.StyleParam("form", true, "query", params.Query)
	if err != nil {
		return nil, err
	}

	queryStrings = append(queryStrings, queryParam0)

	if len(queryStrings) != 0 {
		queryURL += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryURL, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterOrganizationRequest generates requests for RegisterOrganization with JSON body
func NewRegisterOrganizationRequest(server string, body Organization) (*http.Request, error) {
	var bodyReader io.Reader

	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)

	return NewRegisterOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterOrganizationRequestWithBody generates requests for RegisterOrganization with non-JSON body
func NewRegisterOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryURL := fmt.Sprintf("%s/api/organizations", server)

	req, err := http.NewRequest("POST", queryURL, body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// EndpointsByOrganisationIdParams defines parameters for EndpointsByOrganisationId.
type EndpointsByOrganisationIdParams struct {
	OrgIds []string `json:"orgIds"`
	Type   *string  `json:"type,omitempty"`
}

// OrganizationActorsParams defines parameters for OrganizationActors.
type OrganizationActorsParams struct {
	ActorId string `json:"actorId"`
}

// SearchOrganizationsParams defines parameters for SearchOrganizations.
type SearchOrganizationsParams struct {
	Query string `json:"query"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find endpoints based on organisation identifiers and type of endpoint (optional) (GET /api/endpoints)
	EndpointsByOrganisationId(ctx echo.Context, params EndpointsByOrganisationIdParams) error
	// Remove organization by id (DELETE /api/organization/{id})
	DeregisterOrganization(ctx echo.Context, id string) error
	// Get organization by id (GET /api/organization/{id})
	OrganizationById(ctx echo.Context, id string) error
	// get actors for given organization, the main question that is answered by this api: may the professional represent the organization? (GET /api/organization/{id}/actors)
	OrganizationActors(ctx echo.Context, id string, params OrganizationActorsParams) error
	// Search for organizations (GET /api/organizations)
	SearchOrganizations(ctx echo.Context, params SearchOrganizationsParams) error
	// Add an organization to the registry (POST /api/organizations)
	RegisterOrganization(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// EndpointsByOrganisationId converts echo context to params.
func (w *ServerInterfaceWrapper) EndpointsByOrganisationId(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params EndpointsByOrganisationIdParams
	// ------------- Required query parameter "orgIds" -------------
	if paramValue := ctx.QueryParam("orgIds"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument orgIds is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "orgIds", ctx.QueryParams(), &params.OrgIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orgIds: %s", err))
	}

	// ------------- Optional query parameter "type" -------------
	if paramValue := ctx.QueryParam("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EndpointsByOrganisationId(ctx, params)
	return err
}

// DeregisterOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) DeregisterOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeregisterOrganization(ctx, id)
	return err
}

// OrganizationById converts echo context to params.
func (w *ServerInterfaceWrapper) OrganizationById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganizationById(ctx, id)
	return err
}

// OrganizationActors converts echo context to params.
func (w *ServerInterfaceWrapper) OrganizationActors(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params OrganizationActorsParams
	// ------------- Required query parameter "actorId" -------------
	if paramValue := ctx.QueryParam("actorId"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument actorId is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "actorId", ctx.QueryParams(), &params.ActorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter actorId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganizationActors(ctx, id, params)
	return err
}

// SearchOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) SearchOrganizations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params SearchOrganizationsParams
	// ------------- Required query parameter "query" -------------
	if paramValue := ctx.QueryParam("query"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument query is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchOrganizations(ctx, params)
	return err
}

// RegisterOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterOrganization(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterOrganization(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/api/endpoints", wrapper.EndpointsByOrganisationId)
	router.DELETE("/api/organization/:id", wrapper.DeregisterOrganization)
	router.GET("/api/organization/:id", wrapper.OrganizationById)
	router.GET("/api/organization/:id/actors", wrapper.OrganizationActors)
	router.GET("/api/organizations", wrapper.SearchOrganizations)
	router.POST("/api/organizations", wrapper.RegisterOrganization)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
